{
  "version": 3,
  "sources": ["../src/chess/core.js", "../src/ui/chessboard.js", "../src/ui/simplemovetable.js", "../src/main.js"],
  "sourcesContent": ["export const initialPositionFEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nexport const emptyBoardFEN = '8/8/8/8/8/8/8/8 w - - 0 1';\n\nexport class ChessBoard {\n  constructor(FEN) {\n    this.FEN = FEN || emptyBoardFEN;\n  }\n\n  set FEN(str) {\n    const fields = str.split(' ');\n\n    const pieces = fields[0].split('/').map(r => {\n      const row = [];\n      for (const symbol of r.split('')) {\n        if (symbol >= '0' && symbol <= '9') {\n          for (let i = 0; i < symbol - '0'; ++i) {\n            row.push(null);\n          }\n        } else {\n          row.push(symbol);\n        }\n      }\n      return row;\n    });\n    const activeColor = fields[1].toLowerCase();\n    const castling = fields[2].split('');\n    const enPassant = fields[3] != '-' ? fields[3] : null;\n    const halfmoves = fields[4];\n    const fullmoves = fields[5];\n\n    this.pieces = pieces;\n    this.activeColor = activeColor;\n    this.castling = {\n        whiteKingSide: castling.includes('K'),\n        whiteQueenSide: castling.includes('Q'),\n        blackKingSide: castling.includes('k'),\n        blackQueenSide: castling.includes('q')\n    };\n    this.enPassant = enPassant;\n    this.halfmoves = halfmoves;\n    this.fullmoves = fullmoves;\n  }\n\n  get FEN() {\n    const pieces = this.pieces.map(row => {\n      let str = '';\n      let i = 0;\n      for (const cell of row) {\n        if (!cell) {\n          i++;\n        } else if (i > 0) {\n          str += i + cell;\n          i = 0;\n        } else {\n          str += cell;\n        }\n      }\n      if (i > 0)\n        str += i;\n      return str;\n    }).join('/');\n\n    let castling = '';\n    castling += this.castling.whiteKingSide ? 'K' : '';\n    castling += this.castling.whiteQueenSide ? 'Q' : '';\n    castling += this.castling.blackKingSide ? 'k' : '';\n    castling += this.castling.blackQueenSide ? 'q' : '';\n\n    const enPassant = this.enPassant || '-';\n    return [ pieces, this.activeColor, castling, enPassant, this.halfmoves, this.fullmoves ].join(' ');\n  }\n\n  getPiece(row, column) {\n    return this.pieces[row - 1][column - 1];\n  }\n  setPiece(row, column, piece) {\n    this.pieces[row - 1][column - 1] = piece;\n  }\n\n  makeMove(mv) {\n    const {srcRow, srcColumn, dstRow, dstColumn, promotionTarget} = mv;\n\n    const targetPiece = this.getPiece(dstRow, dstColumn);\n    const srcPiece = this.getPiece(srcRow, srcColumn);\n    this.setPiece(dstRow, dstColumn, srcPiece);\n    this.setPiece(srcRow, srcColumn, null);\n\n    const isPawnMove = (srcPiece === 'P') || (srcPiece === 'p');\n    const isEnPassant = isPawnMove && (dstColumn !== srcColumn) && !targetPiece;\n    const isCapture = targetPiece || isEnPassant;\n    const isCastling = ('Kk'.includes(srcPiece) && Math.abs(dstColumn - srcColumn) >= 2);\n    const isPawnPromotion = isPawnMove && (dstRow === 1 || dstRow === 8);\n\n    if (isEnPassant) {\n      /* take enemy's pawn */\n      this.setPiece(srcRow, dstColumn, null);\n    } else if (isPawnPromotion) {\n      this.setPiece(dstRow, dstColumn, makePiece(promotionTarget || 'Q', getPieceColor(srcPiece)));\n    } else if (isCastling) {\n      if (srcPiece === 'K')\n        this.castling.whiteQueenSide = this.castling.whiteKingSide = false;\n      else\n        this.castling.blackQueenSide = this.castling.blackKingSide = false;\n\n      if (dstColumn > srcColumn) {\n        /* Assume regular position of rooks */\n        this.setPiece(dstRow, dstColumn - 1, this.getPiece(dstRow, 8));\n        this.setPiece(dstRow, 8, null);\n      } else {\n        this.setPiece(dstRow, dstColumn + 1, this.getPiece(dstRow, 1));\n        this.setPiece(dstRow, 1, null);\n      }\n    }\n\n    /* take away castling rights if rook moves from original position */\n    if (srcPiece === 'R' && srcRow === 8 && srcColumn === 1)\n      this.castling.whiteQueenSide = false;\n    else if (srcPiece === 'R' && srcRow === 8 && srcColumn === 8)\n      this.castling.whiteKingSide = false;\n    else if (srcPiece === 'r' && srcRow === 1 && srcColumn === 1)\n      this.castling.blackQueenSide = false;\n    else if (srcPiece === 'r' && srcRow === 1 && srcColumn === 8)\n      this.castling.blackKingSide = false;\n\n    if (isPawnMove || isCapture) {\n      this.halfmoves++;\n    }\n    if (isPawnMove && Math.abs(srcRow - dstRow) === 2) {\n      this.enPassant = coordsToString((srcRow + dstRow) / 2, srcColumn);\n    } else {\n      this.enPassant = null;\n    }\n    if (this.activeColor === 'b') {\n      this.fullmoves++;\n      this.activeColor = 'w';\n    } else {\n      this.activeColor = 'b';\n    }\n  }\n\n  *getPieces() {\n    for (let i = 0; i < 8; ++i)\n      for (let j = 0; j < 8; ++j)\n        if (this.pieces[i][j])\n          yield { row: i + 1, column: j + 1, piece: this.pieces[i][j] };\n  }\n\n  /* Get possible moves for particular piece */\n  getPossibleMoves(pieceCoords) {\n    const [row, column] = pieceCoords;\n    const pieces = this.pieces;\n    const getPiece = (r, c) => pieces[r - 1][c - 1];\n    const piece = getPiece(row, column);\n\n    if (!piece)\n      throw new Error(`no piece at ${pieceCoords} for board`, this)\n\n    const pieceColor = getPieceColor(piece);\n    const isEnemy = (r, c) => {\n      const piece = getPiece(r, c);\n      return piece ? (getPieceColor(piece) !== pieceColor) : false;\n    };\n    const isEmptyOrEnemy = (r, c) => {\n      const piece = getPiece(r, c);\n      return piece ? (getPieceColor(piece) !== pieceColor) : true;\n    }\n    const isValidTarget = ([r, c]) => (r > 0 && r <= 8 && c > 0 && c <= 8 && isEmptyOrEnemy(r, c));\n\n    const isEmptyRow = (row, col_from, col_to) => {\n      for (let c = col_from; c < col_to; ++c)\n        if (getPiece(row, c))\n          return false;\n      return true;\n    };\n\n    let moves = [];\n    if (piece === 'P') {\n      if (!getPiece(row - 1, column)) {\n        moves.push([row - 1, column]);\n        if (row == 7 && !getPiece(row - 2, column)) {\n          moves.push([row - 2, column]);\n        }\n      }\n      if (isEnemy(row - 1, column - 1) || (coordsToString(row - 1, column - 1) === this.enPassant))\n        moves.push([row - 1, column - 1]);\n      if (isEnemy(row - 1, column + 1) || (coordsToString(row - 1, column + 1) === this.enPassant))\n        moves.push([row - 1, column + 1]);\n    } else if (piece === 'p') {\n      if (!getPiece(row + 1, column)) {\n        moves.push([row + 1, column]);\n        if (row == 2 && !getPiece(row + 2, column)) {\n          moves.push([row + 2, column]);\n        }\n      }\n      if (isEnemy(row + 1, column - 1) || (coordsToString(row + 1, column - 1) === this.enPassant))\n        moves.push([row + 1, column - 1]);\n      if (isEnemy(row + 1, column + 1) || (coordsToString(row + 1, column + 1) === this.enPassant))\n        moves.push([row + 1, column + 1]);\n    } else if (piece === 'R' || piece === 'r' || piece === 'Q' || piece === 'q') {\n      for (let r = row - 1; r > 0; --r) {\n        if (isEmptyOrEnemy(r, column))\n          moves.push([r, column]);\n        if (getPiece(r, column))\n          break;\n      }\n      for (let r = row + 1; r <= 8; ++r) {\n        if (isEmptyOrEnemy(r, column))\n          moves.push([r, column]);\n        if (getPiece(r, column))\n          break;\n      }\n      for (let c = column - 1; c > 0; --c) {\n        if (isEmptyOrEnemy(row, c))\n          moves.push([row, c]);\n        if (getPiece(row, c))\n          break;\n      }\n      for (let c = column + 1; c <= 8; ++c) {\n        if (isEmptyOrEnemy(row, c))\n          moves.push([row, c]);\n        if (getPiece(row, c))\n          break;\n      }\n    } else if (piece === 'K' || piece === 'k') {\n      const candidates = [\n        [row - 1, column - 1], [row - 1, column], [row - 1, column + 1],\n        [row, column - 1], [row, column + 1],\n        [row + 1, column - 1], [row + 1, column], [row + 1, column + 1]\n      ];\n      moves = candidates.filter(isValidTarget);\n      if (piece === 'K' && this.castling.whiteKingSide && isEmptyRow(row, column + 1, 8))\n        moves.push([row, column + 2]);\n      if (piece === 'K' && this.castling.whiteQueenSide && isEmptyRow(row, 2, column))\n        moves.push([row, column - 2]);\n      if (piece === 'k' && this.castling.blackKingSide && isEmptyRow(row, column + 1, 8))\n        moves.push([row, column + 2]);\n      if (piece === 'k' && this.castling.blackQueenSide && isEmptyRow(row, 2, column))\n        moves.push([row, column - 2]);\n    } else if (piece === 'N' || piece === 'n') {\n      const candidates = [\n        [row + 2, column + 1],\n        [row - 2, column + 1],\n        [row + 1, column + 2],\n        [row - 1, column + 2],\n        [row + 2, column - 1],\n        [row - 2, column - 1],\n        [row + 1, column - 2],\n        [row - 1, column - 2]\n      ];\n      moves = candidates.filter(isValidTarget);\n    };\n    if (piece === 'B' || piece === 'b' || piece === 'Q' || piece === 'q') {\n      for (let i = 1; row + i <= 8 && column + i <= 8; ++i) {\n        if (isEmptyOrEnemy(row + i, column + i))\n          moves.push([row + i, column + i]);\n        if (getPiece(row + i, column + i))\n          break;\n      }\n      for (let i = 1; row + i <= 8 && column - i > 0; ++i) {\n        if (isEmptyOrEnemy(row + i, column - i))\n          moves.push([row + i, column - i]);\n        if (getPiece(row + i, column - i))\n          break;\n      }\n      for (let i = 1; row - i > 0 && column + i <= 8; ++i) {\n        if (isEmptyOrEnemy(row - i, column + i))\n          moves.push([row - i, column + i]);\n        if (getPiece(row - i, column + i))\n          break;\n      }\n      for (let i = 1; row - i > 0 && column - i > 0; ++i) {\n        if (isEmptyOrEnemy(row - i, column - i))\n          moves.push([row - i, column - i]);\n        if (getPiece(row - i, column - i))\n          break;\n      }\n    }\n\n    if ((piece === 'P' && row == 2) || (piece === 'p' && row == 7)) {\n      return moves.map(([dstRow, dstColumn]) => {\n        return 'QRBN'.split('').map(promotion => {\n          return {\n            srcPiece: piece,\n            srcRow: row,\n            srcColumn: column,\n            dstRow: dstRow,\n            dstColumn: dstColumn,\n            promotionTarget: promotion\n          }\n        });\n      }).flat();\n    }\n\n    return moves.map(([dstRow, dstColumn]) => {\n      return {\n        srcPiece: piece,\n        srcRow: row,\n        srcColumn: column,\n        dstRow: dstRow,\n        dstColumn: dstColumn\n     }\n    });\n  }\n\n  getPossibleMoveTargets(pieceCoordsStr) {\n    return this.getPossibleMoves(stringToCoords(pieceCoordsStr))\n      .map(({dstRow, dstColumn}) => coordsToString(dstRow, dstColumn));\n  }\n\n  getLegalMoveTargets(pieceCoordsStr) {\n    return this.getLegalMoves(stringToCoords(pieceCoordsStr))\n      .map(({dstRow, dstColumn}) => coordsToString(dstRow, dstColumn));\n  }\n\n  getPiecesOfColor(color) {\n    return this.getPieces().filter(({row, column, piece}) => {\n      return getPieceColor(piece) === color;\n    });\n  }\n\n  getAllPossibleMoves() {\n    return this.getPiecesOfColor(this.activeColor).reduce((moveList, {row, column, piece}) => {\n      return moveList.concat(this.getPossibleMoves([row, column]))\n    }, []);\n  }\n\n  /* List of moves which threaten to capture some piece (except for\n   * en-passant) */\n  getAllThreats() {\n    return this.getAllPossibleMoves().filter(({dstRow, dstColumn}) => {\n      return this.getPiece(dstRow, dstColumn) != null;\n    });\n  }\n\n  getLegalMoves(pieceCoords) {\n    return this.getPossibleMoves(pieceCoords).filter(mv => {\n      const boardCopy = new ChessBoard(this.FEN);\n      boardCopy.makeMove(mv);\n      const king = boardCopy.getPiecesOfColor(this.activeColor).find(({piece}) => piece.toUpperCase() === 'K');\n      const kingCoords = coordsToString(king.row, king.column);\n      const attacks = boardCopy.getAllThreats().map(m => coordsToString(m.dstRow, m.dstColumn));\n      return !attacks.includes(kingCoords);\n    });\n  }\n\n  getAllLegalMoves() {\n    return this.getPiecesOfColor(this.activeColor).reduce((moveList, {row, column, piece}) => {\n      return moveList.concat(this.getLegalMoves([row, column]))\n    }, []);\n  }\n\n  resolveMove(moveNotation) {\n    const move = moveNotation.replace('x', '').replace('+', '');\n\n    let moves = this.getAllLegalMoves();\n    let srcPiece = undefined;\n    let srcRow = undefined;\n    let srcColumn = undefined;\n    let dstRow = undefined;\n    let dstColumn = undefined;\n    let promotionTarget = undefined;\n\n    let match = null;\n\n    if ((match = move.match(/^([a-h])([1-8])(=([QRNB]))?$/))) {\n      /* e.g. d4 */\n      srcPiece = 'P';\n      dstColumn = match[1];\n      dstRow = match[2];\n      promotionTarget = match[4];\n    } else if ((match = move.match(/^([a-h])([1-8]?)([a-h])([1-8]?)(=([QRNB]))?$/))) {\n      /* e.g. d2d4 */\n      srcPiece = 'P';\n      srcColumn = match[1];\n      srcRow = match[2];\n      dstColumn = match[3];\n      dstRow = match[4];\n      promotionTarget = match[6];\n    } else if ((match = move.match(/^([RNBKQ])([a-h])?([1-8])?([a-h])([1-8])$/))) {\n      /* Nf6, Ngf6, N1f6 */\n      srcPiece = match[1];\n      srcColumn = match[2];\n      srcRow = match[3];;\n      dstColumn = match[4];\n      dstRow = match[5];\n    } else if (move.match('^[0O]-[0O]$')) {\n      moves = moves.filter(mv => {\n        return mv.srcPiece.toUpperCase() == 'K' && mv.dstColumn - mv.srcColumn > 1;\n      });\n    } else if (move.match('^[0O]-[0O]-[0O]$')) {\n      moves = moves.filter(mv => {\n        return mv.srcPiece.toUpperCase() == 'K' && mv.srcColumn - mv.dstColumn > 1;\n      });\n    } else {\n      throw new Error(`invalid move notation '${move}'`)\n    }\n\n    if (srcPiece) {\n      moves = moves.filter(mv => (mv.srcPiece.toUpperCase() === srcPiece));\n    }\n    if (srcColumn) {\n      const srcColumnIdx = 'abcdefgh'.indexOf(srcColumn) + 1;\n      moves = moves.filter(mv => (mv.srcColumn === srcColumnIdx));\n    }\n    if (srcRow) {\n      const srcRowIdx = '87654321'.indexOf(srcRow) + 1;\n      moves = moves.filter(mv => (mv.srcRow === srcRowIdx));\n    }\n    if (dstColumn) {\n      const dstColumnIdx = 'abcdefgh'.indexOf(dstColumn) + 1;\n      moves = moves.filter(mv => (mv.dstColumn === dstColumnIdx));\n    }\n    if (dstRow) {\n      const dstRowIdx = '87654321'.indexOf(dstRow) + 1;\n      moves = moves.filter(mv => (mv.dstRow === dstRowIdx));\n    }\n    if (promotionTarget) {\n      moves = moves.filter(mv => (mv.promotionTarget === promotionTarget));\n    }\n\n    if (moves.length === 1) {\n      console.log(move, \"OK!\");\n    } else {\n      console.log(`illegal/ambiguous move ${move}. FEN: '${this.FEN}', candidates`, moves);\n      console.log(`filter: srcPiece '${srcPiece}' srcColumn '${srcColumn}' srcRow ${srcRow} dstColumn ${dstColumn} dstRow ${dstRow} promotion ${promotionTarget}`);\n    }\n    if (moves.length === 0) {\n      throw new Error(`move ${move} is not legal in current position`);\n    } else if(moves.length > 1) {\n      throw new Error(`move ${move} is ambiguous`);\n    }\n    return moves[0];\n  }\n\n}\n\nexport function makePiece(letter, color) {\n  return (color === 'w') ? letter.toUpperCase() : letter.toLowerCase();\n}\n\nexport function getPieceColor(letter) {\n  return (letter.toUpperCase() === letter) ? \"w\" : \"b\";\n}\n\n/* row, column: 1, ..., 8 */\nexport function coordsToString(row, column) {\n  return 'abcdefgh'[column - 1] + (9 - row);\n}\n\nexport function stringToCoords(str) {\n  if (str.length == 2) {\n    const column = 'abcdefgh'.split('').indexOf(str[0]) + 1;\n    const row = '87654321'.split('').indexOf(str[1]) + 1;\n    if (row > 0 && column > 0) {\n      return [ row, column ];\n    }\n  }\n  return undefined;\n}\n\nexport function movesToFEN(moves) {\n  const board = new ChessBoard(initialPositionFEN);\n  for (const mv of moves) {\n    board.makeMove(board.resolveMove(mv));\n  }\n  return board.FEN;\n}\n\nexport function getMoveNotation(mv) {\n  const {srcRow, srcColumn, srcPiece, dstRow, dstColumn, promotionTarget} = mv;\n  const piece = (srcPiece.toUpperCase() !== 'P') ? srcPiece.toUpperCase() : '';\n  const srcCoords = coordsToString(srcRow, srcColumn);\n  const dstCoords = coordsToString(dstRow, dstColumn);\n  return piece + srcCoords + dstCoords;\n}\n\n", "import {\n  ChessBoard,\n  coordsToString,\n  stringToCoords,\n  getPieceColor,\n} from '../chess/core.js'\n\nexport class ChessBoardUI {\n  moveEventListeners = []\n\n  constructor(elementId) {\n    this.board = new ChessBoard();\n    this.$boardElem = $(`#${elementId}`)\n    this.selectedCell = null;\n  }\n\n  deselectSelectedCell() {\n    this.$boardElem.children('.possible-move').remove();\n    this.$boardElem.children('.selected').removeClass('selected');\n    this.selectedCell = null;\n  }\n\n  handleClick(row, column) {\n    const pos = coordsToString(row, column)\n\n    if (this.selectedCell && this.board.getLegalMoveTargets(this.selectedCell).includes(pos)) {\n      /* Legal move. Move piece and update UI */\n      const srcCoords = stringToCoords(this.selectedCell)\n      const mv = {\n        srcRow: srcCoords[0],\n        srcColumn: srcCoords[1],\n        srcPiece: this.board.getPiece(srcCoords[0], srcCoords[1]),\n        dstRow: row,\n        dstColumn: column,\n        promotionTarget: 'Q'\n      };\n      this.board.makeMove(mv);\n      this.selectedCell = null;\n      this.render();\n      for (const listener of this.moveEventListeners)\n        listener(mv);\n    } else {\n      this.deselectSelectedCell();\n      const selectedPiece = this.board.getPiece(row, column);\n      if (selectedPiece && this.board.activeColor === getPieceColor(selectedPiece)) {\n        /* Highlight selected square */\n        this.$boardElem.children(`.cell[value=\"${pos}\"]`).addClass('selected');\n        this.selectedCell = pos;\n\n        /* Show possible moves */\n        for (const {dstRow, dstColumn} of this.board.getLegalMoves([row, column])) {\n          this.$boardElem.append(\n            $('<div class=\"possible-move\"></div>').css({'grid-row': dstRow, 'grid-column': dstColumn})\n          );\n        }\n      }\n    }\n  }\n\n  render() {\n    const createPiece = (piece, row, column) => {\n      if (piece !== null) {\n        this.$boardElem.append(\n          $('<div></div>').addClass(getPieceClass(piece))\n                          .val(coordsToString(row, column))\n                          .css({ 'grid-row': row, 'grid-column': column})\n                          .click(() => { this.handleClick(row, column); })\n        );\n      }\n    }\n    const createCell = (row, column) => {\n      const color = ((row + column) % 2 == 0) ? \"white\" : \"black\";\n      this.$boardElem.append(\n        $('<div></div>').addClass(color).addClass('cell')\n                        .val(coordsToString(row, column))\n                        .css({ 'grid-row': row, 'grid-column': column})\n                        .click(() => { this.handleClick(row, column); })\n      );\n    }\n\n    this.$boardElem.empty();\n    for (let i = 0; i < 8; ++i) {\n      for (let j = 0; j < 8; ++j) {\n        createCell(i + 1, j + 1);\n        createPiece(this.board.pieces[i][j], i + 1, j + 1);\n      }\n    }\n  }\n\n  resetToFEN(FEN) {\n    this.board.FEN = FEN;\n    this.selectedCell = null;\n    this.render();\n  }\n\n  /* Example: boardUI.addMoveEventListener((mv) => { ... }) */\n  addMoveEventListener(listener) {\n    this.moveEventListeners.push(listener);\n  }\n}\n\n/* 'k' -> 'black king', 'Q' -> 'white queen', ... */\nfunction getPieceClass(letter) {\n  const color = (letter.toUpperCase() === letter) ? \"white \" : \"black \";\n  switch (letter.toLowerCase()) {\n    case 'k': return color + \"king\";\n    case 'q': return color + \"queen\";\n    case 'r': return color + \"rook\";\n    case 'b': return color + \"bishop\";\n    case 'n': return color + \"knight\";\n    case 'p': return color + \"pawn\";\n  }\n}\n\n", "import { movesToFEN } from '../chess/core.js'\n\nexport class SimpleMoveTableUI {\n  moves = []\n  curMoveIndex = 0;\n  moveEventListeners = [];\n\n  constructor(elementId) {\n    this.$tableElem = $(`#${elementId}`);\n  }\n\n  reset(moveList=[]) {\n    this.moves = moveList;\n    this.curMoveIndex = 0;\n    this.render();\n  }\n\n  #notifyListeners() {\n    for (const listener of this.moveEventListeners)\n      listener(this.curMoveIndex);\n  }\n\n  render() {\n    const handleClick = (moveIndex) => {\n      const prevIndex = this.curMoveIndex;\n      this.setCurrentMove(moveIndex);\n      if (prevIndex !== this.curMoveIndex)\n        this.#notifyListeners();\n    };\n\n    this.$tableElem.empty();\n    for (let i = 0; i < this.moves.length; i += 2) {\n      const tr = $('<tr></tr>');\n      tr.append(`<th>${i / 2 + 1}</th>`);\n      tr.append($(`<td>${this.moves[i]}</td>`).click(() => {handleClick(i)}));\n      if (this.moves[i + 1])\n        tr.append($(`<td>${this.moves[i + 1]}</td>`).click(() => {handleClick(i + 1)}));\n      this.$tableElem.append(tr);\n    }\n    this.setCurrentMove(this.curMoveIndex);\n  }\n\n  constrainMoveIndex(moveIndex) {\n    if (moveIndex < 0 || this.moves.length === 0)\n      return 0;\n    if (moveIndex >= this.moves.length)\n      return this.moves.length - 1;\n    return moveIndex;\n  }\n\n  getCurrentMoveIndex() {\n    return this.curMoveIndex;\n  }\n\n  setCurrentMove(moveIndex) {\n    moveIndex = this.constrainMoveIndex(moveIndex);\n    this.$tableElem.find('td').removeClass('active');\n    this.$tableElem.find(`tr:nth-child(${Math.floor(moveIndex / 2) + 1}) td:nth-of-type(${moveIndex % 2 + 1})`).addClass('active');\n    this.curMoveIndex = moveIndex;\n  }\n\n  focusTop(moveIndex) {\n    if (this.moves.length === 0)\n      return;\n    moveIndex = this.constrainMoveIndex(moveIndex);\n    const $wrapper = this.$tableElem.parent();\n    const $td = this.$tableElem.find('td').eq(moveIndex);\n    const tdTop = $td.position().top;\n    $wrapper.get(0).scrollTo(0, tdTop);\n  }\n\n  focusBottom(moveIndex) {\n    if (this.moves.length === 0)\n      return;\n    moveIndex = this.constrainMoveIndex(moveIndex);\n    const $wrapper = this.$tableElem.parent();\n    const $td = this.$tableElem.find('td').eq(moveIndex);\n    const tdBottom = $td.position().top + $td.height();\n    $wrapper.get(0).scrollTo(0, tdBottom - $wrapper.height());\n  }\n\n  isFullyVisible(moveIndex) {\n    if (this.moves.length === 0)\n      return true;\n    moveIndex = this.constrainMoveIndex(moveIndex);\n    const $wrapper = this.$tableElem.parent();\n    const wrapper = $wrapper.get(0);\n    const $td = this.$tableElem.find('td').eq(moveIndex);\n    const tdTop = $td.position().top;\n    const tdBottom = $td.position().top + $td.height();\n    return tdTop >= wrapper.scrollTop && tdBottom <= wrapper.scrollTop + $wrapper.height();\n  }\n\n  gotoNextMove() {\n    this.setCurrentMove(this.curMoveIndex + 1);\n    if (!this.isFullyVisible(this.curMoveIndex))\n      this.focusBottom(this.curMoveIndex);\n    this.#notifyListeners();\n  }\n\n  gotoPrevMove() {\n    this.setCurrentMove(this.curMoveIndex - 1);\n    if (!this.isFullyVisible(this.curMoveIndex))\n      this.focusTop(this.curMoveIndex);\n    this.#notifyListeners();\n  }\n\n  gotoFirstMove() {\n    this.setCurrentMove(0);\n    this.focusBottom(this.curMoveIndex);\n    this.#notifyListeners();\n  }\n\n  gotoLastMove() {\n    this.setCurrentMove(this.moves.length - 1);\n    this.focusBottom(this.curMoveIndex);\n    this.#notifyListeners();\n  }\n\n  pushMove(mv) {\n    this.moves = this.moves.slice(0, this.curMoveIndex + 1);\n    this.moves.push(mv);\n    this.curMoveIndex += 1;\n    this.render();\n    this.focusBottom(this.curMoveIndex);\n  }\n\n  getCurrentFEN() {\n    return movesToFEN(this.moves.slice(0, this.curMoveIndex + 1));\n  }\n\n  /* Example: tableUI.addMoveEventListener((moveIndex) => { ... }) */\n  addMoveEventListener(listener) {\n    this.moveEventListeners.push(listener);\n  }\n}\n", "const params = new URLSearchParams(document.location.search);\nconst FENUrlParam = params.get('FEN');\nconst FENInput = document.getElementById('fen-input');\nconst FENCopyButton = document.getElementById('fen-copy');\n\nimport {\n  getMoveNotation,\n  movesToFEN,\n  emptyBoardFEN,\n  initialPositionFEN\n} from './chess/core.js'\nimport { ChessBoardUI } from './ui/chessboard.js';\nimport { SimpleMoveTableUI } from './ui/simplemovetable.js';\n\nfunction getFEN() {\n  return FENInput.value || FENInput.placeholder;\n}\n\n$(document).ready(() => {\n  const mainBoard = new ChessBoardUI('main-board');\n  const mainMoveTable = new SimpleMoveTableUI('main-pgn-table');\n\n  const resetToFEN = (FEN) => {\n    $(FENInput).val(FEN);\n    mainBoard.resetToFEN(FEN);\n    mainMoveTable.reset();\n  };\n\n  const resetToPGN = (moveList) => {\n    const FEN = movesToFEN(moveList);\n    $(FENInput).val(FEN);\n    mainBoard.resetToFEN(FEN);\n    mainMoveTable.reset(moveList);\n    mainMoveTable.setCurrentMove(moveList.length - 1);\n    mainMoveTable.focusBottom(moveList.length - 1);\n  }\n\n  $('#btn-starting-position').click(() => {\n    resetToFEN(initialPositionFEN);\n  });\n\n  $('#btn-clear-board').click(() => {\n    resetToFEN(emptyBoardFEN);\n  });\n\n  $('#btn-random-puzzle').click(() => {\n    //const puzzleId = \"Pvv9d\";\n    const puzzleId = \"next\";\n    $.getJSON(`https://lichess.org/api/puzzle/${puzzleId}`, data => {\n      console.log(\"puzzle data\", data);\n      const moves = data.game.pgn.split(\" \");\n      resetToPGN(moves);\n    });\n  });\n  $('#fen-copy').click(() => {\n    navigator.clipboard.writeText(getFEN());\n  });\n  $('#fen-input').on('input', () => {\n    resetToFEN(getFEN());\n  });\n\n  mainMoveTable.addMoveEventListener(() => {\n    const FEN = mainMoveTable.getCurrentFEN();\n    mainBoard.resetToFEN(FEN);\n    $(FENInput).val(FEN);\n  });\n\n  mainBoard.addMoveEventListener(mv => {\n    mainMoveTable.pushMove(getMoveNotation(mv));\n    $(FENInput).val(mainBoard.board.FEN);\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (e.code === 'ArrowRight') {\n      mainMoveTable.gotoNextMove();\n    } else if (e.code === 'ArrowLeft') {\n      mainMoveTable.gotoPrevMove();\n    } else if (e.code === 'ArrowUp') {\n      mainMoveTable.gotoFirstMove();\n    } else if (e.code === 'ArrowDown') {\n      mainMoveTable.gotoLastMove();\n    }\n  });\n\n  resetToFEN(FENUrlParam ? FENUrlParam : getFEN());\n});\n"],
  "mappings": "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",
  "names": ["initialPositionFEN", "emptyBoardFEN", "ChessBoard", "_ChessBoard", "FEN", "str", "fields", "pieces", "r", "row", "symbol", "i", "activeColor", "castling", "enPassant", "halfmoves", "fullmoves", "cell", "column", "piece", "mv", "srcRow", "srcColumn", "dstRow", "dstColumn", "promotionTarget", "targetPiece", "srcPiece", "isPawnMove", "isEnPassant", "isCapture", "isCastling", "makePiece", "getPieceColor", "coordsToString", "j", "pieceCoords", "getPiece", "c", "pieceColor", "isEnemy", "isEmptyOrEnemy", "isValidTarget", "isEmptyRow", "col_from", "col_to", "moves", "promotion", "pieceCoordsStr", "stringToCoords", "color", "moveList", "boardCopy", "king", "kingCoords", "m", "moveNotation", "move", "match", "srcColumnIdx", "srcRowIdx", "dstColumnIdx", "dstRowIdx", "letter", "movesToFEN", "board", "getMoveNotation", "srcCoords", "dstCoords", "ChessBoardUI", "elementId", "ChessBoard", "row", "column", "pos", "coordsToString", "srcCoords", "stringToCoords", "mv", "listener", "selectedPiece", "getPieceColor", "dstRow", "dstColumn", "createPiece", "piece", "getPieceClass", "createCell", "color", "i", "j", "FEN", "letter", "SimpleMoveTableUI", "elementId", "moveList", "#notifyListeners", "listener", "handleClick", "moveIndex", "prevIndex", "i", "tr", "$wrapper", "tdTop", "$td", "tdBottom", "wrapper", "mv", "movesToFEN", "params", "FENUrlParam", "FENInput", "FENCopyButton", "getFEN", "mainBoard", "ChessBoardUI", "mainMoveTable", "SimpleMoveTableUI", "resetToFEN", "FEN", "resetToPGN", "moveList", "movesToFEN", "initialPositionFEN", "emptyBoardFEN", "data", "moves", "mv", "getMoveNotation", "e"]
}
